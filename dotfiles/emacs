(setq auto-revert-interval 1)					 ; Refresh buffers fast
(setq custom-file (make-temp-file ""))			 ; Discard customization's
(setq echo-keystrokes 0.1)               		 ; Show keystrokes asap
(setq inhibit-startup-message t)         		 ; No splash screen please
(setq initial-scratch-message nil)       		 ; Clean scratch buffer
(setq recentf-max-saved-items 100)       		 ; Show more recent files
(setq ring-bell-function 'ignore)        		 ; Quiet
(setq sentence-end-double-space nil)     		 ; No double space
(setq next-line-add-newlines t)

(set-default-font "Ubuntu Mono-11")

;;(setq browse-url-browser-function 'browse-url-generic
;;      browse-url-generic-program "google-chrome")

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "opera")

;; backup files(~filename) will be created in this dir
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Sacha says "disk space is cheap, lets use it :)"
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; http://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html
;; Save everything to history
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode +1)
(setq savehist-save-minibuffer-history +1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))

;; selected region background color
(set-face-attribute 'region nil :background "#777")

;; don't blink cursor !
(blink-cursor-mode 0)
(when (display-graphic-p)
  (setq-default cursor-type 'box))
(setq x-stretch-cursor 1)

(setq inhibit-startup-message t)

(global-hl-line-mode 1)
(cua-mode 1)

(global-hl-line-mode 1)
(cua-mode 1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq blink-matching-paren nil)
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)

(display-time-mode 1)
;; (global-linum-mode 1)
(column-number-mode 1)
(display-battery-mode 1)
(delete-selection-mode 1)
(setq indent-tabs-mode nil)


(load "~/.emacs.secrets" t)

;; Unique Buffer Names
(require 'uniquify)

;; Save last cursor place for buffer
(require 'saveplace)
(setq-default save-place t)

(winner-mode t)
(windmove-default-keybindings)

(setq tab-width 4)
(setq python-indent 4)
(defalias 'yes-or-no-p 'y-or-n-p)
(prefer-coding-system 'utf-8)

(require 'package)

(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("elpy"  . "http://jorgenschaefer.github.io/packages/") t)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)	
  )

(setq tramp-default-method "ssh")

(require 'saveplace)
(setq-default save-place t)


;;************************************************************************
;;				 Package Check
;;************************************************************************

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; make sure to have downloaded archive description.
;; Or use package-archive-contents as suggested by Nicolas Dudebout
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

(ensure-package-installed 'undo-tree 'smex 'ido-ubiquitous 
			  'ido-vertical-mode 'pabbrev
			  'auto-complete
			  'switch-window 'ace-jump-mode
			  'iedit) ;  --> (nil nil) if

;; activate installed packages
(package-initialize)

;;************************************************************************
;;				   ibuffer
;;************************************************************************

(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

;;************************************************************************
;;				   Undo-tree
;;************************************************************************

(global-undo-tree-mode)

;;************************************************************************
;;				 Switch Window
;;************************************************************************
(global-set-key (kbd "C-M-z") 'switch-window)


;;************************************************************************
;;                                Org-Mode
;;************************************************************************
(require 'org)
(require 'org-install)
(require 'org-mobile)

(require 'epa-file)
(epa-file-enable)

(require 'table)

(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (progn
    ;;(defvar orgdir "c:/org/")))
    ;; (defvar orgdir "c:/Users/Paytr05/Desktop/")
    ;; (defvar orgdir (concat "c:" (getenv "HOMEPATH") "\\Documents\\org"))
    (defvar orgdir (concat "c:" (getenv "HOMEPATH") "\\Dropbox\\org"))
    (defvar blogdir (concat "c:" (getenv "HOMEPATH") "\\Desktop"))
    )
  )
 ((string-equal system-type "gnu/linux") ; GNU/Linux
  (progn
    (defvar orgdir "~/Dropbox/org/")))
 )
 
 ;; source satırlarına autoindent
(setq org-src-tab-acts-natively t)

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

(define-key global-map "\C-cl" 'org-store-link)
(global-set-key (kbd "C-c C-s") 'calendar)(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-directory orgdir)
(setq org-agenda-files (list (concat orgdir "/is.org")
			     (concat orgdir "/kisisel.org")
			     (concat orgdir "/notlar.org")
			     (concat orgdir "/yazi.org")
))

(setq org-log-into-drawer "LOGBOOK")
(setq org-default-notes-file (concat orgdir "/notlar.org"))
(define-key global-map "\C-cc" 'org-capture)

(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

;;(require 'org-publish)
(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (progn
    (setq org-publish-project-alist
	  '(("site"
	     :base-directory (concat orgdir "/blog")
	     :publishing-directory (concat orgdir "/blog")
	     :section-numbers nil
	     :table-of-contents nil
	     :publishing-function org-html-publish-to-html
	     )))
    ))
 ((string-equal system-type "gnu/linux") ; GNU/Linux
  (progn
    (setq org-publish-project-alist
	  '(("site"
	     :base-directory "~/Proje/umtmu.github.io"
	     :publishing-directory "~/Proje/umtmu.github.io"
	     :publishing-function org-html-publish-to-html
	     )))
    ))
 )

;;(setq org-agenda-diary-file (concat orgdir "\\diary.org"))

;; Org-mode günlüğü de içeriyor.
(setq org-agenda-include-diary t)

(setq diary-file (concat orgdir "/diary"))

;;(setq org-agenda-diary-file (concat orgdir "/diary.org"))
;; "|"'nin solu yapılacak/eylem bekleyen, sağı yapılmayacak/eylem beklemeyen
;; parantez içindeki ilk harf CcCt kombinasyonundan sonraki kısayolu
;; ! otomatik olarak saatin ekleneceği
;; @ mesaj yazmanı istiyor
;; /! Tam anlamadım. Aşağıdakini oku anlarsan sil
;; The setting for WAIT is even more special: the ‘!’ after the slash means
;; that in addition to the note taken when entering the state, a timestamp
;; should be recorded when leaving the WAIT state, if and only if the target
;; state does not configure logging for entering it. So it has no effect when
;; switching from WAIT to DONE, because DONE is configured to record a timestamp
;; only. But when switching from WAIT back to TODO, the ‘/!’ in the WAIT setting
;; now triggers a timestamp even though TODO has no logging configured.
(setq org-todo-keywords
       '((sequence "TODO(t!)" "WAIT(w@/!)" "REVIVED(r@/!)" "NEXT(n@)" "|" "DONE(d!)"
		   "CANCELED(c@)")))
;; TODO -> DONE as for TIME
(setq org-log-done 'time)

(setq org-capture-templates
      '(
	("t" "Todo" entry
	 (file+headline (concat orgdir "/notlar.org") "Tasks") "* TODO %? %^G\n   :PROPERTIES:\n   :CREATED: %U\n   :END:  %i\n  %a")
        ("j" "Journal" entry
	 (file+datetree (concat orgdir "/journal.org") "Journal")	"* %?  \n \nEntered on %U\n  %i")
	("r" "Read" entry
	 (file+headline (concat orgdir "/notlar.org") "Readings") "* TODO %c\n  %a")
	)
      )

(setq org-src-fontify-natively t)

;;************************************************************************
;;                          Auto Complete
;;************************************************************************

(ac-config-default)


;;************************************************************************
;;                          Undo Save
;;************************************************************************
(setq undo-tree-auto-save-history t)


;;************************************************************************
;;                            Auto-Completion
;;************************************************************************
(ido-mode 1)
(ido-everywhere 1)
(setq org-completion-use-ido t)

(require 'ido-vertical-mode)
;; Color codes can be used to customize
(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :background nil
                    :foreground nil)

;; optionally
(setq ido-use-faces nil)

(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)

;;************************************************************************
;;                               Smex
;;************************************************************************

(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;;************************************************************************
;;                               Auto-Fill
;;************************************************************************

;;(setq-default fill-column 80)
;;(setq auto-fill-mode t)
;;(add-hook 'text-mode-hook 'turn-on-auto-fill)
;;(setq-default auto-fill-function 'do-auto-fill)

;;************************************************************************
;;                               Visual Line Mode
;;************************************************************************

(global-visual-line-mode 1)

;;************************************************************************
;;                            Move Lines Up And Down
;;************************************************************************
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector [default default default italic underline success warning error])
 '(ansi-color-names-vector ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(compilation-message-face (quote default))
 '(custom-enabled-themes (quote (deeper-blue)))
 '(custom-safe-themes (quote ("bb749a38c5cb7d13b60fa7fc40db7eced3d00aa93654d150b9627cabd2d9b361" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "b9e9ba5aeedcc5ba8be99f1cc9301f6679912910ff92fdf7980929c2fc83ab4d" "98cc377af705c0f2133bb6d340bf0becd08944a588804ee655809da5d8140de6" "5dc0ae2d193460de979a463b907b4b2c6d2c9c4657b2e9e66b8898d2592e3de5" "84d2f9eeb3f82d619ca4bfffe5f157282f4779732f48a5ac1484d94d5ff5b279" "405b0ac2ac4667c5dab77b36e3dd87a603ea4717914e30fcf334983f79cfd87e" "a802c77b818597cc90e10d56e5b66945c57776f036482a033866f5f506257bca" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "71ecffba18621354a1be303687f33b84788e13f40141580fa81e7840752d31bf" default)))
 '(ecb-options-version "2.50")
 '(elpy-project-root-finder-functions (quote (elpy-project-find-python-root elpy-project-find-hg-root elpy-project-find-svn-root)))
 '(fci-rule-color "#3E3D31")
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-tail-colors (quote (("#3E3D31" . 0) ("#67930F" . 20) ("#349B8D" . 30) ("#21889B" . 50) ("#968B26" . 60) ("#A45E0A" . 70) ("#A41F99" . 85) ("#3E3D31" . 100))))
 '(hl-sexp-background-color "#1c1f26")
 '(magit-diff-use-overlays nil)
 '(org-agenda-files (quote ("/home/umt/Dropbox/org/kisisel.org" "/home/umt/Dropbox/org/notlar.org" "/home/umt/Dropbox/org/izlenecekler.org")))
 '(pos-tip-background-color "#A6E22E")
 '(pos-tip-foreground-color "#272822")
 '(safe-local-variable-values (quote ((python-shell-completion-string-code . "';'.join(get_ipython().Completer.all_completions('''%s'''))
") (python-shell-completion-module-string-code . "';'.join(module_completion('''%s'''))
") (python-shell-completion-setup-code . "from IPython.core.completerlib import module_completion") (python-shell-interpreter-args . "manage.py shell") (python-shell-interpreter . "python"))))
 '(sml/mode-width (if (eq (powerline-current-separator) (quote arrow)) (quote right) (quote full)))
 '(sml/pos-id-separator (quote ("" (:propertize " " face powerline-active1) (:eval (propertize " " (quote display) (funcall (intern (format "powerline-%s-%s" (powerline-current-separator) (car powerline-default-separator-dir))) (quote powerline-active1) (quote powerline-active2)))) (:propertize " " face powerline-active2))))
 '(sml/pos-minor-modes-separator (quote ("" (:propertize " " face powerline-active1) (:eval (propertize " " (quote display) (funcall (intern (format "powerline-%s-%s" (powerline-current-separator) (cdr powerline-default-separator-dir))) (quote powerline-active1) (quote sml/global)))) (:propertize " " face sml/global))))
 '(sml/pre-id-separator (quote ("" (:propertize " " face sml/global) (:eval (propertize " " (quote display) (funcall (intern (format "powerline-%s-%s" (powerline-current-separator) (car powerline-default-separator-dir))) (quote sml/global) (quote powerline-active1)))) (:propertize " " face powerline-active1))))
 '(sml/pre-minor-modes-separator (quote ("" (:propertize " " face powerline-active2) (:eval (propertize " " (quote display) (funcall (intern (format "powerline-%s-%s" (powerline-current-separator) (cdr powerline-default-separator-dir))) (quote powerline-active2) (quote powerline-active1)))) (:propertize " " face powerline-active1))))
 '(sml/pre-modes-separator (propertize " " (quote face) (quote sml/modes)))
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(vc-annotate-background nil)
 '(vc-annotate-color-map (quote ((20 . "#F92672") (40 . "#CF4F1F") (60 . "#C26C0F") (80 . "#E6DB74") (100 . "#AB8C00") (120 . "#A18F00") (140 . "#989200") (160 . "#8E9500") (180 . "#A6E22E") (200 . "#729A1E") (220 . "#609C3C") (240 . "#4E9D5B") (260 . "#3C9F79") (280 . "#A1EFE4") (300 . "#299BA6") (320 . "#2896B5") (340 . "#2790C3") (360 . "#66D9EF"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list (unspecified "#272822" "#3E3D31" "#A20C41" "#F92672" "#67930F" "#A6E22E" "#968B26" "#E6DB74" "#21889B" "#66D9EF" "#A41F99" "#FD5FF0" "#349B8D" "#A1EFE4" "#F8F8F2" "#F8F8F0")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
 '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

;;;;************************************************************************
;;;;                        Ace Jump
;;;;************************************************************************
;;
;;(require 'ace-jump-mode)
;;(global-set-key (kbd "C-c SPC") 'ace-jump-mode)

;;************************************************************************
;;                        active Babel languages
;;************************************************************************

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
    )
 )

;;************************************************************************
;;                        Make windmove work in org-mode
;;************************************************************************

(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

(require 'org-alert)
(setq alert-default-style 'libnotify)


;;************************************************************************
;;                        Google-IT
;;************************************************************************
;; source: http://batsov.com/articles/2011/11/19/why-emacs/

(defun prelude-google ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))


;;************************************************************************
;;                        pabbrew
;;************************************************************************

(require 'pabbrev)
(require 'popup)

(global-pabbrev-mode t)
(setq pabbrev-idle-timer-verbose nil)

(define-key pabbrev-mode-map [tab] 'pabbrev-expand-maybe)

(defun pabbrevx-suggestions-goto-buffer (suggestions)
  (let* ((candidates (mapcar 'car suggestions))
         (bounds (pabbrev-bounds-of-thing-at-point))
         (selection (popup-menu* candidates
                                 :point (car bounds)
                                 :scroll-bar t)))
    (when selection
      ;; modified version of pabbrev-suggestions-insert
      (let ((point))
        (save-excursion
          (progn
            (delete-region (car bounds) (cdr bounds))
            (insert selection)
            (setq point (point))))
        (if point
            (goto-char point))
        ;; need to nil this so pabbrev-expand-maybe-full won't try
        ;; pabbrev expansion if user hits another TAB after ac aborts
        (setq pabbrev-last-expansion-suggestions nil)
        ))))
      
(fset 'pabbrev-suggestions-goto-buffer 'pabbrevx-suggestions-goto-buffer)
